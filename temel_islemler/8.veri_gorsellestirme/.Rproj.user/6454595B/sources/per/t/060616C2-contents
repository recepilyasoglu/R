---
title: "Veri Manipulasyonu"
output: html_notebook
editor_options: 
  chunk_output_type: console
---

select(): degisken secimleri
filter(): gozlem secimleri
mutate(): degisken olusturma
summarise(): ozet istatistikler
group_by(): gruplama
left_join(): birlestirme islemleri
summarise(): veri ozetleme

# 0. Veri Seti

nycflights13 new york city'a ait 2013 yilinin ucus verileri.


# 1. Degisken Islemleri: select()


```{r}


df <- flights

# once veriyle klasik islemler yapiyoruz
head(df)

str(df)

summary(df)


```

```{r}

# kacar tane bu hava yolu sirketlerinden var, 
# ve bu hava yolu sirketleri ortalama kacar dk gecikme saglamis

df %>% 
  select(dep_delay, day, carrier) %>% # sirketler, gun ve gecikme zamanlari
  filter(dep_delay > 10) %>% # gecikme zamani 10 dan buyuk olanlar
  group_by(carrier) %>% # sirkete gore gruplama
  summarise(n = n(),
            ortalama = mean(dep_delay) # decime zamaninin ortalamasini 
            )


```

select()

```{r}
# select()' in ilk argumani dataframe olmak zorunda
select(df, carrier, flight, tailnum)

select(df, carrier, flight, origin:hour) # origin den saat degiskenine kadar gitsin

select(df, 1:3)

select(df, -carrier) # carrier degiskeni artik yok istemedik onu

select(df, -c(carrier, tailnum)) # birden fazla degisken disarda birakma

select(df, -c(origin:hour)) # ayni sekilde


```


## contains()

```{r}

select(df, contains("time")) # herhangi bir yerinde "time" gecen degiskenleri getirdi


```

## starts_with()

```{r}


select(df, starts_with("dep")) # kalkisla baslayan degiskenleri aldik


```

## ends_with()

```{r}


select(df, ends_with("delay")) # delay le biten degiskenleri getirdi


```

## num_range()

```{r}

m <- matrix(1:25, 5,5)

colnames(m) <- paste("x", 1:5, sep = "") # sutunlari isimlendirdik
m

select(as.data.frame(m), num_range("x", 1:3)) # x in yaninda 3 olana kadar getirdi, 
# m'i dataframe'e cevirmek zorunda kaldik cunku 
# select()'in ilk argumana dataframe olmak zorunda

```

```{r}


select(df, carrier, tailnum, contains("time"))
# hem icerisinde "time" gecenleri hem de oteki degiskenelri getirdi


```


# 2. Gozlem Islemler: filter()

## filter()

```{r}


filter(df, year == 2013) # yil 2013 olanlari aldik

filter(df, year ==2013 & month == 2)

filter(df, year == 2013 & month == 2 & day == 18)

filter(df, dep_delay > 1000) #1000 dk'dan fazla gecikmesi olan havayollari


# kalkis gecikmesi, kaliks gecikmesi ortalamasindan buyuk olanlari alalim

filter(df, dep_delay > mean(df$dep_delay, na.rm = TRUE))
# "na.rm"  argumani bos gozlemleri sil= TRUE yani evet sil


# hem ortalamasindan hem de standart sapmasindan buyuk olanlari getir
# amac veriyi kucultmek
filter(df, dep_delay > mean(df$dep_delay, na.rm = TRUE) + sd(df$dep_delay, na.rm = TRUE))


```

## arrange()

```{r}

# kucukten buyuge, buyukten kucuge siralamaya yarar

a <- select(df, dep_delay, month, day)

arrange(a, dep_delay, month, day) # kucukten buyuge siraladik once dep_delaye gore 

arrange(a, desc(dep_delay), month, day) # buyukten kucuge siraladik yukardakini tam tersi


b <- arrange(a, desc(dep_delay), month, day)

filter(a, dep_delay > 0) #dep_delayi 0 dan buyuk olanlara gore filtreledik


```

```{r}

# yukardakinin pipe'li halini yazalim

df %>%
  filter(month == 2, day == 18) %>%
  select(dep_delay, month) %>%
  arrange(desc(dep_delay), month)


```


## sample_frac()

```{r}

# belirtilen oranda degiskenleri getirir

df %>% sample_frac(0.05)


```

## sample_n()

```{r}

# icinden 100 tane degiskeni rastgele secmek istedigimizde kullanilir

df %>% sample_n(100)



```

## slice()

```{r}
# pozisyona gore secim, 199 dan 299 e kadar secsin

df %>% slice(199:299)


```

## top_n()

```{r}

# ilk n degeri alacak sekilde secim islemi sagliyor

df %>% top_n(10) # ilk 10 gozlemi getirdi

```


# 3. Degisken Donusum Islemleri: mutate()

## mutate()

```{r}

sample <- df %>% 
  sample_n(1000) %>% # 1000 tane gozlem aldik
  select(arr_delay, dep_delay, distance, arr_time) # bu degiskenleri getir


mutate(sample,
       kazanc = arr_delay - dep_delay, # varis gecikmesinden kalkis gecikmesini ifade ettik
       hiz = distance / arr_time * 60, # mesafe / varis zamani * 60 = hiz
       yeni = kazanc / hiz
       )

```

## rename()

```{r}

rename(df, 
       varis_gecikmesi = arr_delay,
       kalkis_gecikmesi = dep_delay) # yeniden isimlendirdik


```

## trans_mute()

```{r}

# eger yeni degisken olustururken eski degiskenleri istemitorsak trans_mute kullaniyoruz


transmute(sample,
       kazanc = arr_delay - dep_delay, 
       hiz = distance / arr_time * 60,
       yeni = kazanc / hiz
       )

# sadece yeni degiskenleri yazdi


```

# 4. Gruplama: group_by()

```{r}

# hava yolu sirketine gore grupladik

df %>% group_by(carrier) 


df %>% group_by(carrier) %>%
  summarise(ucus_sayisi = n(), # gruplama isleminde sonra saydirmak istersek n fonskiyonunu kullaniriz n orda sabit sayi bir fonksiyon
  ortalama = mean(dep_delay, na.rm = TRUE), # ortalamasi dep_delayin
  medyan = median(dep_delay, na.rm = TRUE), # medyani dep_delayin
  sd = sd(dep_delay, na.rm = TRUE), # standart sapmasi dep_delayin
  var = var(dep_delay, na.rm = TRUE), # varyansi dep_delayin
  ort_uzaklik = mean(distance, na.rm = TRUE)
  ) 

# genel olarak hava yolu sirketlerine ait gecikmelerle ilgili islemlerde bulunduk

```

# 5. Veri Ozetleme: summarise()

## counts()


## mean(), meadlan(), sum(), ad(), var()

## first(), last(), nth()

## quantile(), min(), max()



# 6. Join Islemleri

## left_join()

## right_join()

## inner_join()

## full_join()


# 7. Tidy Data()

```{r}

table1

table2

table3

table4a

table4b
```

## gathering ve spreading


## gathering

```{r}
# gather -> getir gibi kalsin akinda :)
# duzensiz veri tablosunu sectik, kacan degerleri duzelticez

# getirmek istedigimiz degiskenin degerler,
# getirdikten sonra bu degiskenin adi ne olacak
# kalan degerleri de value ile cases adinda topladik, 
# cunku duzenli tablo da cases'ın altindaydilar

table4a %>% gather(`1999`, `2000`, key = "year", value = "cases")

```

```{r}

# burdaki de populationu bozmuslar onu duzelticez

table4b %>% gather(`1999`, `2000`, key = "year", value = "population")


```

```{r}


tidy_a <- table4a %>% gather(`1999`, `2000`, key = "year", value = "cases")

tidy_b <- table4b %>% gather(`1999`, `2000`, key = "year", value = "population")

left_join(tidy_a, tidy_b) # veri setlerini birlestirmis olduk left_join'le


```

## spreading

```{r}

# asagidaki degiskenleri cases ve population' lari yukariya getirmemiz gerekli
# yukardakileri de asagiya indirmemiz gerekir

spread(table2, key = "type", value = "count")

table2 %>% spread(key = "type", value = "count") # bu da pipe' li hali


```

## separating and uniting

## separating

```{r}

# separating ayirmak demektir 
# bu tablodaki rate degiskeninde yer alan cases/population'u ayirmak istiyoruz

table3 %>% 
  separate(rate, into = c("cases","population"), sep = "/", convert = TRUE)

# sirasiyla rate' i sectik degistirmek istedigimiz,
# into diyerek rate yerine yazmak istediklerimizi yazdik,
# sep diyerek aradaki ayraci tanimladik,
# convert diyerek de rate  de chr dı karakterlerdi yanş bunlari en yakn degisken turune tanimliyor birnevi convert 


```

## unite 

```{r}
# bu da birlestirme demek
# table 5 deki century ve year'i birlestirmemiz lazim 
#rate'i de yina ayirmak gerekebilir

table5 %>% 
  unite(new, century, year, sep = "" )

# sirasiyla ilk arguman yenide giskenin ismi
# sorna birlestirmek istedigimiz degisken isimleri
# en son olarak da birlestirme operatorunu kendimiz belirtiyoruz

table5 %>% unite(year, century, year, sep="") # bu da olur ben denedim bunu :) 
# 18/12/2021 04:21 C.tesi :) -> veri manipülasyonu bitti


```